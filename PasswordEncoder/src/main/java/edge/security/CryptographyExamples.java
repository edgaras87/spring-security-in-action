package edge.security;

import org.springframework.security.crypto.encrypt.BytesEncryptor;
import org.springframework.security.crypto.encrypt.Encryptors;
import org.springframework.security.crypto.encrypt.TextEncryptor;
import org.springframework.security.crypto.keygen.BytesKeyGenerator;
import org.springframework.security.crypto.keygen.KeyGenerators;
import org.springframework.security.crypto.keygen.StringKeyGenerator;

public class CryptographyExamples {
	
	public static void generateKeyExamples() {
		
		System.out.println(" ====== Generate Key ======== ");
		System.out.println();

		StringKeyGenerator stringKeyGenerator = KeyGenerators.string();
		String salt = stringKeyGenerator.generateKey();
		System.out.println("salt: " + salt);
		System.out.println();

		/**
		 * The keys generated by the BytesKeyGenerator created with the
		 * KeyGenerators-.secureRandom() method are unique for each call of the
		 * generateKey() method.
		 */
		BytesKeyGenerator bytesKeyGenerator = KeyGenerators.secureRandom();
		byte[] key1 = bytesKeyGenerator.generateKey();
		byte[] key2 = bytesKeyGenerator.generateKey();
		int keyLength = bytesKeyGenerator.getKeyLength();

		System.out.println("key1: " + key1 + " length: " + keyLength);
		System.out.println("key2: " + key2 + " length: " + keyLength);
		System.out.println();

		/**
		 * returns the same key value for each call of the same key generator.
		 */
		BytesKeyGenerator bytesKeyGeneratorShared = KeyGenerators.shared(8);
		byte[] key1Shared = bytesKeyGeneratorShared.generateKey();
		byte[] key2Shared = bytesKeyGeneratorShared.generateKey();
		keyLength = bytesKeyGenerator.getKeyLength();

		System.out.println("key1 shared: " + key1Shared + " length: " + keyLength);
		System.out.println("key2 shared: " + key2Shared + " length: " + keyLength);
		System.out.println();
		
 		System.out.println(" ============================ ");

	}

	public static void encryptorsExamples() {
		
		System.out.println(" ======== Encryptors ======== ");
		System.out.println();

		String salt;
		String password;
		String valueToEncrypt;

		salt = KeyGenerators.string().generateKey();
		password = "secret";
		valueToEncrypt = "Hello";
		System.out.println("salt: " + salt + " value: " + valueToEncrypt + " password: " + password);
		System.out.println();

		// BytesEncryptor
		BytesEncryptor e;
		byte[] encryptedBytes;
		byte[] decryptedBytes;
		System.out.println(" === Bytes Encryptor");
		System.out.println();

		// Encryptors.standard() 256-byte AES encryption
		// uses cipher block chaining (CBC)
		e = Encryptors.standard(password, salt);
		encryptedBytes = e.encrypt(valueToEncrypt.getBytes());
		decryptedBytes = e.decrypt(encryptedBytes);
		System.out.println("Encryptors.standard()");
		System.out.println("value in bytes: " + valueToEncrypt.getBytes());
		System.out.println("encryption 1:");
		System.out.println("     encrypted: " + encryptedBytes);
		System.out.println("     decrypted: " + decryptedBytes);
		System.out.println(" back to value: " + decryptedBytes.toString());

		encryptedBytes = e.encrypt(valueToEncrypt.getBytes());
		decryptedBytes = e.decrypt(encryptedBytes);
		System.out.println("encryption 2:");
		System.out.println("     encrypted: " + encryptedBytes);
		System.out.println("     decrypted: " + decryptedBytes);
		System.out.println(" back to value: " + decryptedBytes.toString());
		System.out.println();

		// Encryptors.stronger() 256-byte AES encryption
		// uses Galois/Counter Mode (GCM)
		e = Encryptors.stronger(password, salt);
		encryptedBytes = e.encrypt(valueToEncrypt.getBytes());
		decryptedBytes = e.decrypt(encryptedBytes);
		System.out.println("Encryptors.stronger()");
		System.out.println("value in bytes: " + valueToEncrypt.getBytes());
		System.out.println("encryption 1:");
		System.out.println("     encrypted: " + encryptedBytes);
		System.out.println("     decrypted: " + decryptedBytes);
		System.out.println(" back to value: " + decryptedBytes.toString());

		encryptedBytes = e.encrypt(valueToEncrypt.getBytes());
		decryptedBytes = e.decrypt(encryptedBytes);
		System.out.println("encryption 2:");
		System.out.println("     encrypted: " + encryptedBytes);
		System.out.println("     decrypted: " + decryptedBytes);
		System.out.println(" back to value: " + decryptedBytes.toString());
		System.out.println();

		// TextEncryptor
		TextEncryptor t;
		String encryptedText;
		String decryptedText;
		System.out.println(" === Text Encryptor");
		System.out.println();

		// Encryptors.noOpText() dummy encryption doesnâ€™t encrypt value
		t = Encryptors.noOpText();
		encryptedText = t.encrypt(valueToEncrypt);
		decryptedText = t.decrypt(encryptedText);
		System.out.println("Encryptors.noOpText()");
		System.out.println("encrypted: " + encryptedText);
		System.out.println("decrypted: " + decryptedText);
		System.out.println();

		// Encryptors.text(): 256-byte AES encryption
		// uses cipher block chaining (CBC)
		t = Encryptors.text(password, salt);
		encryptedText = t.encrypt(valueToEncrypt);
		decryptedText = t.decrypt(encryptedText);
		System.out.println("Encryptors.text()");
		System.out.println("encryption 1:");
		System.out.println("encrypted: " + encryptedText);
		System.out.println("decrypted: " + decryptedText);

		encryptedText = t.encrypt(valueToEncrypt);
		decryptedText = t.decrypt(encryptedText);
		System.out.println("encryption 2:");
		System.out.println("encrypted: " + encryptedText);
		System.out.println("decrypted: " + decryptedText);
		System.out.println();

		// Encryptors.delux(): 256-byte AES encryption
		// uses Galois/Counter Mode (GCM)
		t = Encryptors.delux(password, salt);
		encryptedText = t.encrypt(valueToEncrypt);
		decryptedText = t.decrypt(encryptedText);
		System.out.println("Encryptors.delux()");
		System.out.println("encryption 1:");
		System.out.println("encrypted: " + encryptedText);
		System.out.println("decrypted: " + decryptedText);

		encryptedText = t.encrypt(valueToEncrypt);
		decryptedText = t.decrypt(encryptedText);
		System.out.println("encryption 2:");
		System.out.println("encrypted: " + encryptedText);
		System.out.println("decrypted: " + decryptedText);
		System.out.println();

		// Encryptors.queryableText():
		// same input repeatedly generates same outputs
		t = Encryptors.queryableText(password, salt);
		encryptedText = t.encrypt(valueToEncrypt);
		decryptedText = t.decrypt(encryptedText);
		System.out.println("Encryptors.queryableText()");
		System.out.println("encryption 1:");
		System.out.println("encrypted: " + encryptedText);
		System.out.println("decrypted: " + decryptedText);

		encryptedText = t.encrypt(valueToEncrypt);
		decryptedText = t.decrypt(encryptedText);
		System.out.println("encryption 2:");
		System.out.println("encrypted: " + encryptedText);
		System.out.println("decrypted: " + decryptedText);
		System.out.println();
		
		System.out.println(" ============================ ");
	}

}
